{"version":3,"sources":["/home/bero/WebstormProjects/aleo-snap/packages/wasm/src/wasmBuild/aleo_wasm.js"],"sourcesContent":["let wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.byteLength === 0) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nexport class ExecutionResponse {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n* Webassembly Representation of an Aleo function fee execution response\n*\n* This object is returned by the execution of the `fee` function in credits.aleo. If a fee is\n* specified when attempting to create an on-chain program execution transaction, this will be\n* required as part of the transaction. However, it can be executed in parallel to execution of\n* main program in separate web workers prior to creation of the transaction.\n*/\nexport class FeeExecution {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_feeexecution_free(ptr);\n    }\n    /**\n    * Get the amount of the fee\n    * @returns {bigint}\n    */\n    fee() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.feeexecution_fee(retptr, this.ptr);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Create a private key from a string representation\n    *\n    * This function will fail if the text is not a valid private key\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key\n    *\n    * This function should be used very carefully as it exposes the private key plaintext\n    * @returns {string}\n    */\n    to_string() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a private key ciphertext using a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt the private key with a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext using a secret.\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nexport class PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely.\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_encryptPrivateKey(retptr, private_key.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string.\n    *\n    * This must be the same secret used to encrypt the private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nexport class Program {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Program.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Get javascript array of functions names in the program\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a webform to capture user inputs for an execution of a function.\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nexport class RecordCiphertext {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Return a record ciphertext from a string.\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the record ciphertext string.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key.\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.ptr, view_key.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns `true` if the view key can decrypt the record ciphertext.\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.ptr, view_key.ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Aleo record plaintext\n*/\nexport class RecordPlaintext {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.ptr, private_key.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_sign(private_key.ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.ptr, address.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    * @returns {string}\n    */\n    transactionId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    * @returns {string}\n    */\n    transactionType() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class ViewKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ViewKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.viewkey_from_private_key(private_key.ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.viewkey_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_crypto_70a96de3b6b73dac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_process_dd1577445152112e = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_58036bec3add9e6f = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_6a9d28205ed5b0d8 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_adbc770ec9eca9c7 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_f05d779769764e82 = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_getRandomValues_3774744e221a22ad = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_e950366c42764a07 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_newnoargs_2b8b6bd7753c76ba = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_95d1ea488d03e4e8 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_f9876326328f45ed = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_e7c1f827057f6584 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_a09ec664e14b1b81 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_87cbb8506fecf3a9 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_c85a9259e621f3db = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_0da6f12fbc1ab6eb = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_17224bc548dd1d7b = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_call_9495de66fdbe016b = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_537b7341ce90bb31 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_17499e8aa4003ebd = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithlength_b56c882b57805732 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_7526649b91a252a6 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_6aa458a4ebdb65cb = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('aleo_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n"],"names":[],"mappings":"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"}